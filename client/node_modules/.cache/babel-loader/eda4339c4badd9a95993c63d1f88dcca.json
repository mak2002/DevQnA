{"ast":null,"code":"var _jsxFileName = \"/Users/mak/projects/web3/stackoverflow-clone/client/src/components/AskQuestionBar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AskQuestion() {\n  _s();\n\n  function doSomething() {\n    var todos = Gun().get(\"todos\");\n    todos.set({\n      title: \"hello world\"\n    });\n    todos.map().on(function (todo, id) {\n      console.log(\"<><>\", todo, id);\n    });\n  }\n\n  const initialValues = {\n    company: \"\",\n    position: \"\",\n    link: \"\",\n    date: \"\",\n    note: \"\"\n  };\n  const [values, setValues] = useState(initialValues);\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    console.log(\">>>>>\", name, value);\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(\">>>>>\", values);\n  };\n\n  const details = [{\n    title: \"Title\",\n    description: 'Be specific and imagine you\"re asking a question to another person.',\n    inputWidth: \"h-10 w-full pl-2\",\n    name: \"title\"\n  }, {\n    title: \"What are the details of your problem?\",\n    description: \"Introduce the problem and expand on what you put in the title. Minimum 20 characters.\",\n    inputWidth: \"h-40 w-full\",\n    name: \"details\"\n  }, {\n    title: \"Title\",\n    description: 'Be specific and imagine you\"re asking a question to another person.',\n    inputWidth: \"h-20 w-full pl-2\",\n    name: \"details2\"\n  }];\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-stone-700 pl-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"py-5 pl-5 text-left text-2xl font-bold text-white\",\n        children: \"Ask a public question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), details.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"m-5 flex w-4/6 flex-col items-start bg-zinc-800 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-xl text-white\",\n            children: item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-white\",\n            children: item.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: item.title,\n            className: `${item.inputWidth} my-3 resize-none bg-zinc-700 text-black`,\n            onChange: handleInputChange,\n            name: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: onSubmitF,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n/**\n * <html>\n  <body>\n    <h1>Todos</h1>\n\n    <ul></ul>\n    \n    <form><input><button>Add</button></form>\n\n    <!-- Load GUN itself. -->\n    <script src=\"https://cdn.jsdelivr.net/npm/gun/gun.js\"></script>\n\n    <!-- Load jQuery to help make things a bit easier. -->\n    <script src=\"https://code.jquery.com/jquery-1.12.4.min.js\"></script>\n\n    <script>\n      // Initialize GUN and tell it we will be storing all data under the key 'todos'.\n      var todos = Gun().get('todos')\n      \n      // Get the form element.\n      var form = $('form')\n      // Listen for submits of the form.\n      form.on('submit', function (event) {\n        // Get the input element.\n        var input = form.find('input')\n        // Tell GUN to store an object,\n        // with as title the value of the input element.\n        todos.set({title: input.val()})\n        // Clear the input element, so the user is free to enter more todos.\n        input.val('')\n        // Prevent default form submit handling.\n        event.preventDefault()\n      })\n\n      // Listen to any changes made to the GUN todos list.\n      // This will be triggered each time the list changes.\n      // And because of how GUN works, sometimes even multiple times per change.\n      todos.map().on(function (todo, id) {\n        // Check if the todo element already exists.\n        // This can happen because GUN sometimes sends mulitple change events for the same item.\n        var li = $('#' + id)\n        // Does is not yet exist?\n        if (!li.get(0)) {\n          // Create it.\n          // Set the id to the GUN id of the item.\n          // GUN automatically creates id's for all items.\n          // Finally set the new todo element to the end of the list.\n          li = $('<li>').attr('id', id).appendTo('ul')\n        }\n        // Does the GUN item contain any data?\n        // (It sends null if it was removed from GUN.)\n        if (todo) {\n          // Create an element with the title of the GUN item in it.\n          var html = '<span onclick=\"clickTitle(this)\">' + todo.title + '</span>'\n          // Add a checkbox in front and check it if the GUN item has a done state.\n          html = '<input type=\"checkbox\" onclick=\"clickCheck(this)\" ' + (todo.done ? 'checked' : '') + '>' + html\n          // Add a trashcan icon and make it clickable.\n          html += '<img onclick=\"clickDelete(this)\" src=\"https://cdnjs.cloudflare.com/ajax/libs/foundicons/3.0.0/svgs/fi-x.svg\"/>'\n          // Set it to the element.\n          li.html(html)\n        } else {\n          // The item was removed from GUN, because we got null.\n          // Delete it from the screen.\n          li.remove()\n        }\n      })\n\n      // What to do when a todo's text is clicked.\n      function clickTitle (element) {\n        // Get the (jQuery) element of the text.\n        element = $(element)\n        // Check if the element does not yet contain an input field.\n        // So we will only add one input field when clicked multiple times.\n        if (!element.find('input').get(0)) {\n          // Turn the elements text into an input.\n          element.html('<input value=\"' + element.html() + '\" onkeyup=\"keypressTitle(this)\">')\n        }\n      }\n      \n      // What to do when Enter is pressed while editing a todo.\n      function keypressTitle (element) {\n        // Is Enter pressed?\n        if (event.keyCode === 13) {\n          // Get the GUN item with the id that we store in the element.\n          // And tell GUN to update the title of the todo item.\n          todos.get($(element).parent().parent().attr('id')).put({title: $(element).val()})\n        }\n      }\n      \n      // What to do when a checkbox is clicked.\n      function clickCheck (element) {\n        // Set the done state of the GUN todo item.\n        // Notice that we do not need to put the full object (including it's title state).\n        // GUN will only change the done property of the item and leaves the other properties (like title) intact.\n        todos.get($(element).parent().attr('id')).put({done: $(element).prop('checked')})\n      }\n\n      // What to do when a trashcan is clicked.\n      function clickDelete (element) {\n        // In GUN the way to delete an item, is to set it's value to null.\n        // This is because of how graph databases, like GUN, work internally.\n        todos.get($(element).parent().attr('id')).put(null)\n      }\n    </script>\n    \n    <!-- Just some minimal styling. -->\n    <style>\n      ul { padding: 0; }\n      li { display: flex; }\n      li span { width: 150px; word-break: break-all; }\n      img { height: 20px; margin-left: 8px; cursor: pointer; }\n      input { width: 150px; margin-right: 8px; }\n      input[type='checkbox'] { width: auto; }\n    </style>\n  </body>\n</html>\n * \n * \n * \n * \n * \n * \n */\n\n_s(AskQuestion, \"4lcv5AY4KdEfpz8E2Yi+UXqs8J8=\");\n\n_c = AskQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"AskQuestion\");","map":{"version":3,"names":["React","useState","AskQuestion","doSomething","todos","Gun","get","set","title","map","on","todo","id","console","log","initialValues","company","position","link","date","note","values","setValues","handleInputChange","e","name","value","target","handleSubmit","preventDefault","details","description","inputWidth","item","index","onSubmitF"],"sources":["/Users/mak/projects/web3/stackoverflow-clone/client/src/components/AskQuestionBar.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport GUN from \"gun\";\n\nexport default function AskQuestion() {\n  function doSomething() {\n    var todos = Gun().get(\"todos\");\n    todos.set({ title: \"hello world\" });\n\n    todos.map().on(function (todo, id) {\n      console.log(\"<><>\", todo, id);\n    });\n  }\n\n  const initialValues = {\n    company: \"\",\n    position: \"\",\n    link: \"\",\n    date: \"\",\n    note: \"\",\n  };\n\n  const [values, setValues] = useState(initialValues);\n\n  const handleInputChange = (e: any) => {\n    const { name, value } = e.target;\n    console.log(\">>>>>\", name, value);\n    setValues({\n      ...values,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = (e: any) => {\n    e.preventDefault();\n    console.log(\">>>>>\", values);\n  }\n\n  const details = [\n    {\n      title: \"Title\",\n      description:\n        'Be specific and imagine you\"re asking a question to another person.',\n      inputWidth: \"h-10 w-full pl-2\",\n      name: \"title\",\n    },\n    {\n      title: \"What are the details of your problem?\",\n      description:\n        \"Introduce the problem and expand on what you put in the title. Minimum 20 characters.\",\n      inputWidth: \"h-40 w-full\",\n      name: \"details\",\n    },\n    {\n      title: \"Title\",\n      description:\n        'Be specific and imagine you\"re asking a question to another person.',\n      inputWidth: \"h-20 w-full pl-2\",\n      name: \"details2\",\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <div className=\"bg-stone-700 pl-5\">\n        <h1 className=\"py-5 pl-5 text-left text-2xl font-bold text-white\">\n          Ask a public question\n        </h1>\n\n        {details.map((item, index) => {\n          return (\n            <div className=\"m-5 flex w-4/6 flex-col items-start bg-zinc-800 p-6\">\n              <h3 className=\"text-xl text-white\">{item.title}</h3>\n              <p className=\"text-white\">{item.description}</p>\n              <input\n                type=\"text\"\n                placeholder={item.title}\n                className={`${item.inputWidth} my-3 resize-none bg-zinc-700 text-black`}\n                onChange={handleInputChange}\n                name={item.name}\n              />\n            </div>\n          );\n        })}\n        <button type=\"submit\" onClick={onSubmitF}>Submit</button>\n      </div>\n    </React.Fragment>\n  );\n}\n\n/**\n * <html>\n  <body>\n    <h1>Todos</h1>\n\n    <ul></ul>\n    \n    <form><input><button>Add</button></form>\n\n    <!-- Load GUN itself. -->\n    <script src=\"https://cdn.jsdelivr.net/npm/gun/gun.js\"></script>\n\n    <!-- Load jQuery to help make things a bit easier. -->\n    <script src=\"https://code.jquery.com/jquery-1.12.4.min.js\"></script>\n\n    <script>\n      // Initialize GUN and tell it we will be storing all data under the key 'todos'.\n      var todos = Gun().get('todos')\n      \n      // Get the form element.\n      var form = $('form')\n      // Listen for submits of the form.\n      form.on('submit', function (event) {\n        // Get the input element.\n        var input = form.find('input')\n        // Tell GUN to store an object,\n        // with as title the value of the input element.\n        todos.set({title: input.val()})\n        // Clear the input element, so the user is free to enter more todos.\n        input.val('')\n        // Prevent default form submit handling.\n        event.preventDefault()\n      })\n\n      // Listen to any changes made to the GUN todos list.\n      // This will be triggered each time the list changes.\n      // And because of how GUN works, sometimes even multiple times per change.\n      todos.map().on(function (todo, id) {\n        // Check if the todo element already exists.\n        // This can happen because GUN sometimes sends mulitple change events for the same item.\n        var li = $('#' + id)\n        // Does is not yet exist?\n        if (!li.get(0)) {\n          // Create it.\n          // Set the id to the GUN id of the item.\n          // GUN automatically creates id's for all items.\n          // Finally set the new todo element to the end of the list.\n          li = $('<li>').attr('id', id).appendTo('ul')\n        }\n        // Does the GUN item contain any data?\n        // (It sends null if it was removed from GUN.)\n        if (todo) {\n          // Create an element with the title of the GUN item in it.\n          var html = '<span onclick=\"clickTitle(this)\">' + todo.title + '</span>'\n          // Add a checkbox in front and check it if the GUN item has a done state.\n          html = '<input type=\"checkbox\" onclick=\"clickCheck(this)\" ' + (todo.done ? 'checked' : '') + '>' + html\n          // Add a trashcan icon and make it clickable.\n          html += '<img onclick=\"clickDelete(this)\" src=\"https://cdnjs.cloudflare.com/ajax/libs/foundicons/3.0.0/svgs/fi-x.svg\"/>'\n          // Set it to the element.\n          li.html(html)\n        } else {\n          // The item was removed from GUN, because we got null.\n          // Delete it from the screen.\n          li.remove()\n        }\n      })\n\n      // What to do when a todo's text is clicked.\n      function clickTitle (element) {\n        // Get the (jQuery) element of the text.\n        element = $(element)\n        // Check if the element does not yet contain an input field.\n        // So we will only add one input field when clicked multiple times.\n        if (!element.find('input').get(0)) {\n          // Turn the elements text into an input.\n          element.html('<input value=\"' + element.html() + '\" onkeyup=\"keypressTitle(this)\">')\n        }\n      }\n      \n      // What to do when Enter is pressed while editing a todo.\n      function keypressTitle (element) {\n        // Is Enter pressed?\n        if (event.keyCode === 13) {\n          // Get the GUN item with the id that we store in the element.\n          // And tell GUN to update the title of the todo item.\n          todos.get($(element).parent().parent().attr('id')).put({title: $(element).val()})\n        }\n      }\n      \n      // What to do when a checkbox is clicked.\n      function clickCheck (element) {\n        // Set the done state of the GUN todo item.\n        // Notice that we do not need to put the full object (including it's title state).\n        // GUN will only change the done property of the item and leaves the other properties (like title) intact.\n        todos.get($(element).parent().attr('id')).put({done: $(element).prop('checked')})\n      }\n\n      // What to do when a trashcan is clicked.\n      function clickDelete (element) {\n        // In GUN the way to delete an item, is to set it's value to null.\n        // This is because of how graph databases, like GUN, work internally.\n        todos.get($(element).parent().attr('id')).put(null)\n      }\n    </script>\n    \n    <!-- Just some minimal styling. -->\n    <style>\n      ul { padding: 0; }\n      li { display: flex; }\n      li span { width: 150px; word-break: break-all; }\n      img { height: 20px; margin-left: 8px; cursor: pointer; }\n      input { width: 150px; margin-right: 8px; }\n      input[type='checkbox'] { width: auto; }\n    </style>\n  </body>\n</html>\n * \n * \n * \n * \n * \n * \n */\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAIA,eAAe,SAASC,WAAT,GAAuB;EAAA;;EACpC,SAASC,WAAT,GAAuB;IACrB,IAAIC,KAAK,GAAGC,GAAG,GAAGC,GAAN,CAAU,OAAV,CAAZ;IACAF,KAAK,CAACG,GAAN,CAAU;MAAEC,KAAK,EAAE;IAAT,CAAV;IAEAJ,KAAK,CAACK,GAAN,GAAYC,EAAZ,CAAe,UAAUC,IAAV,EAAgBC,EAAhB,EAAoB;MACjCC,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBH,IAApB,EAA0BC,EAA1B;IACD,CAFD;EAGD;;EAED,MAAMG,aAAa,GAAG;IACpBC,OAAO,EAAE,EADW;IAEpBC,QAAQ,EAAE,EAFU;IAGpBC,IAAI,EAAE,EAHc;IAIpBC,IAAI,EAAE,EAJc;IAKpBC,IAAI,EAAE;EALc,CAAtB;EAQA,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBrB,QAAQ,CAACc,aAAD,CAApC;;EAEA,MAAMQ,iBAAiB,GAAIC,CAAD,IAAY;IACpC,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAkBF,CAAC,CAACG,MAA1B;IACAd,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBW,IAArB,EAA2BC,KAA3B;IACAJ,SAAS,CAAC,EACR,GAAGD,MADK;MAER,CAACI,IAAD,GAAQC;IAFA,CAAD,CAAT;EAID,CAPD;;EASA,MAAME,YAAY,GAAIJ,CAAD,IAAY;IAC/BA,CAAC,CAACK,cAAF;IACAhB,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBO,MAArB;EACD,CAHD;;EAKA,MAAMS,OAAO,GAAG,CACd;IACEtB,KAAK,EAAE,OADT;IAEEuB,WAAW,EACT,qEAHJ;IAIEC,UAAU,EAAE,kBAJd;IAKEP,IAAI,EAAE;EALR,CADc,EAQd;IACEjB,KAAK,EAAE,uCADT;IAEEuB,WAAW,EACT,uFAHJ;IAIEC,UAAU,EAAE,aAJd;IAKEP,IAAI,EAAE;EALR,CARc,EAed;IACEjB,KAAK,EAAE,OADT;IAEEuB,WAAW,EACT,qEAHJ;IAIEC,UAAU,EAAE,kBAJd;IAKEP,IAAI,EAAE;EALR,CAfc,CAAhB;EAwBA,oBACE,QAAC,KAAD,CAAO,QAAP;IAAA,uBACE;MAAK,SAAS,EAAC,mBAAf;MAAA,wBACE;QAAI,SAAS,EAAC,mDAAd;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,EAKGK,OAAO,CAACrB,GAAR,CAAY,CAACwB,IAAD,EAAOC,KAAP,KAAiB;QAC5B,oBACE;UAAK,SAAS,EAAC,qDAAf;UAAA,wBACE;YAAI,SAAS,EAAC,oBAAd;YAAA,UAAoCD,IAAI,CAACzB;UAAzC;YAAA;YAAA;YAAA;UAAA,QADF,eAEE;YAAG,SAAS,EAAC,YAAb;YAAA,UAA2ByB,IAAI,CAACF;UAAhC;YAAA;YAAA;YAAA;UAAA,QAFF,eAGE;YACE,IAAI,EAAC,MADP;YAEE,WAAW,EAAEE,IAAI,CAACzB,KAFpB;YAGE,SAAS,EAAG,GAAEyB,IAAI,CAACD,UAAW,0CAHhC;YAIE,QAAQ,EAAET,iBAJZ;YAKE,IAAI,EAAEU,IAAI,CAACR;UALb;YAAA;YAAA;YAAA;UAAA,QAHF;QAAA;UAAA;UAAA;UAAA;QAAA,QADF;MAaD,CAdA,CALH,eAoBE;QAAQ,IAAI,EAAC,QAAb;QAAsB,OAAO,EAAEU,SAA/B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QApBF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AA0BD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAhNwBjC,W;;KAAAA,W"},"metadata":{},"sourceType":"module"}